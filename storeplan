import matplotlib.pyplot as plt  # Importa a biblioteca de plotagem matplotlib
import matplotlib.patches as patches  # Importa patches para adicionar formas geométricas aos gráficos
import random  # Importa o módulo random para gerar números e escolhas aleatórias

# Função para calcular a área
def calculate_area(largura, comprimento):
    return largura * comprimento  # Retorna o produto da largura pelo comprimento, que é a área

# Função para classificar a categoria com base na quantidade de objetos
def classify_category(count):
    if count <= 6:
        return "CONTAINER"  # Categoria "CONTAINER" se a quantidade for até 6
    elif count <= 9:
        return "SHOPPING"  # Categoria "SHOPPING" se a quantidade for até 9
    elif count <= 15:
        return "MEGA"  # Categoria "MEGA" se a quantidade for até 15
    else:
        return "SUPER"  # Categoria "SUPER" se a quantidade for maior que 15

# Função para verificar colisão entre objetos
def check_collision(positions, x, y, obj_largura, obj_comprimento, spacing):
    for (px, py, pl, pc, _) in positions:
        # Verifica se os objetos colidem, considerando espaçamento
        if not (x + obj_largura + spacing <= px or x >= px + pl + spacing or
                y + obj_comprimento + spacing <= py or y >= py + pc + spacing):
            return True  # Retorna True se houver colisão
    return False  # Retorna False se não houver colisão

# Função para distribuir objetos em um espaço dado
# Função para distribuir objetos em um espaço dado
def distribute_objects(largura, comprimento):
    all_objects = [
        ((0.5, 0.5), "Trufa"),        # Objeto 1
        ((0.5, 2), "Caixa 1"),        # Objeto 2
        ((0.5, 2), "Caixa 2"),        # Objeto 3
        ((0.4, 2), "Caixa 3"),        # Objeto 4
        ((1, 2), "Caixa Grande 1"),   # Objeto 5
        ((1, 2), "Caixa Grande 2"),   # Objeto 6
        ((0.3, 4), "Caixa Alta 1"),   # Objeto 7
        ((0.5, 4.5), "Caixa Alta 2"), # Objeto 8
        ((0.5, 3), "Caixa 4"),        # Objeto 9
        ((0.5, 1), "Caixa 5"),        # Objeto 10
        ((0.6, 3), "Lacreme"),        # Objeto 11
        ((0.4, 2.5), "Caixa 7"),      # Objeto 12
        ((1, 2), "Caixa Grande 3"),   # Objeto 13
        ((0.6, 1.8), "Caixa 8"),      # Objeto 14
        ((0.7, 2), "balcão"),         # Objeto 15
        ((0.7, 2.1), "Caixa 9"),      # Objeto 16
        ((0.6, 3), "Lacreme"),        # Objeto 17
        ((0.7, 2.4), "Caixa 11"),     # Objeto 18
        ((0.5, 1.5), "Caixa 12"),     # Objeto 19
        ((1, 2.8), "Caixa Grande 5")  # Objeto 20
    ]
    
    positions = []  # Lista para armazenar as posições dos objetos
    spacing = 0.05  # Espaçamento entre os objetos
    vitrine_spacing = 0.1  # Espaçamento reservado para a vitrine

    # Garantir que o objeto "balcão" esteja sempre presente e seja o primeiro a ser distribuído
    selected_objects = [obj for obj in all_objects if obj[1] == "balcão"]
    selected_objects.extend(random.sample([obj for obj in all_objects if obj[1] != "balcão"], 4))
    
    while len(selected_objects) < 20:
        selected_objects.append(random.choice(all_objects))  # Adiciona objetos aleatórios até ter 20 objetos selecionados
    
    # Priorizar a escolha de objetos que proporcionem a maior quantidade ao longo do perímetro
    selected_objects.sort(key=lambda x: (2 * (largura // x[0][0] + comprimento // x[0][1])), reverse=True)
    random.shuffle(selected_objects)  # Embaralha a lista de objetos selecionados

    # Distribuir o objeto "balcão" primeiro
    balcão = next(obj for obj in selected_objects if obj[1] == "balcão")
    selected_objects.remove(balcão)  # Remove o balcão da lista de objetos selecionados

    # Definir a posição do balcão garantindo uma distância de 0.4 metros das bordas
    balcão_largura, balcão_comprimento = balcão[0]
    x_balcao, y_balcao = 0.4, 0.4
    
    positions.append((x_balcao, y_balcao, balcão_largura, balcão_comprimento, balcão[1]))

    # Ajustar a posição inicial para a distribuição dos outros objetos
    x, y = x_balcao + balcão_largura + spacing, 0  # Começar ao lado do balcão
    for i, ((obj_largura, obj_comprimento), nome) in enumerate(selected_objects):
        largura_max = max(obj_largura, obj_comprimento)
        comprimento_max = min(obj_largura, obj_comprimento)
        label = nome
        if x + largura_max <= largura and len(positions) < 20:
            if not check_collision(positions, x, y, largura_max, comprimento_max, spacing):
                if largura > comprimento:
                    if x + largura_max + vitrine_spacing <= largura:  # Verifica a linha da vitrine
                        positions.append((x, y, largura_max, comprimento_max, label))
                else:
                    if y + comprimento_max + vitrine_spacing <= comprimento:  # Verifica a linha da vitrine
                        positions.append((x, y, largura_max, comprimento_max, label))
            x += largura_max + spacing
        
    x, y = 0, y_balcao + balcão_comprimento + spacing
    for i, ((obj_largura, obj_comprimento), nome) in enumerate(selected_objects[len(positions):]):
        largura_max = min(obj_largura, obj_comprimento)
        comprimento_max = max(obj_largura, obj_comprimento)
        label = nome
        if y + comprimento_max <= comprimento and len(positions) < 20:
            if not check_collision(positions, x, y, largura_max, comprimento_max, spacing):
                if largura > comprimento:
                    if x + largura_max + vitrine_spacing <= largura:  # Verifica a linha da vitrine
                        positions.append((x, y, largura_max, comprimento_max, label))
                else:
                    if y + comprimento_max + vitrine_spacing <= comprimento:  # Verifica a linha da vitrine
                        positions.append((x, y, largura_max, comprimento_max, label))
            y += comprimento_max + spacing
    
    x, y = largura, y_balcao + balcão_comprimento + spacing
    for i, ((obj_largura, obj_comprimento), nome) in enumerate(selected_objects[len(positions):]):
        largura_max = min(obj_largura, obj_comprimento)
        comprimento_max = max(obj_largura, obj_comprimento)
        label = nome
        if y + comprimento_max <= comprimento and len(positions) < 20:
            if not check_collision(positions, x - largura_max, y, largura_max, comprimento_max, spacing):
                if largura > comprimento:
                    if x - largura_max - vitrine_spacing >= 0:  # Verifica a linha da vitrine
                        positions.append((x - largura_max, y, largura_max, comprimento_max, label))
                else:
                    if y + comprimento_max + vitrine_spacing <= comprimento:  # Verifica a linha da vitrine
                        positions.append((x - largura_max, y, largura_max, comprimento_max, label))
            y += comprimento_max + spacing
    
    x, y = largura, comprimento
    for i, ((obj_largura, obj_comprimento), nome) in enumerate(selected_objects[len(positions):]):
        largura_max = max(obj_largura, obj_comprimento)
        comprimento_max = min(obj_largura, obj_comprimento)
        label = nome
        if x - largura_max >= 0 and len(positions) < 20:
            if not check_collision(positions, x - largura_max, y - comprimento_max, largura_max, comprimento_max, spacing):
                if largura > comprimento:
                    if x - largura_max - vitrine_spacing >= 0:  # Verifica a linha da vitrine
                        positions.append((x - largura_max, y - comprimento_max, largura_max, comprimento_max, label))
                else:
                    if y - comprimento_max - vitrine_spacing >= 0:  # Verifica a linha da vitrine
                        positions.append((x - largura_max, y - comprimento_max, largura_max, comprimento_max, label))
            x -= largura_max + spacing

    return positions  # Retorna a lista de posições dos objetos


# Função para plotar o layout
def plot_layout(largura, comprimento, positions, category, area):
    fig, ax = plt.subplots(figsize=(10.24, 10.24), dpi=100)  # Cria uma figura para plotar
    ax.set_xlim(0, largura)
    ax.set_ylim(0, comprimento)  # Define os limites dos eixos
    ax.set_aspect('equal')  # Define a proporção dos eixos como igual
    ax.add_patch(patches.Rectangle((0, 0), largura, comprimento, edgecolor='black', facecolor='none'))  # Adiciona o retângulo principal

    # Adiciona cada objeto como um retângulo no gráfico
    for (x, y, obj_largura, obj_comprimento, label) in positions:
        ax.add_patch(patches.Rectangle((x, y), obj_largura, obj_comprimento, edgecolor='black', facecolor='none'))
        plt.text(x + obj_largura / 2, y + obj_comprimento / 2, label, ha='center', va='center')

    text_x = largura - 0.1
    text_y = comprimento - (-0.8)
    line_spacing = 0.15  # Espaçamento constante entre as linhas de texto

    # Adiciona textos com informações sobre o layout
    plt.text(text_x, text_y, f"L: {largura}m", ha='right', va='top')
    plt.text(text_x, text_y - line_spacing, f"C: {comprimento}m", ha='right', va='top')
    plt.text(text_x, text_y - 2 * line_spacing, f"Área: {area:.2f}m²", ha='right', va='top')
    plt.text(text_x, text_y - 3 * line_spacing, category, ha='right', va='top')

    ax.set_xlabel('Largura (m)')
    ax.set_ylabel('Comprimento (m)')
    ax.grid(True, alpha=0.5)  # Adiciona uma grade ao gráfico com transparência

    # Adiciona a indicação da vitrine conforme a orientação
    if largura > comprimento:
        ax.add_patch(patches.Rectangle((largura, 0), 0.1, comprimento, edgecolor='blue', facecolor='none', linewidth=3))
        plt.text(largura - 0.05, comprimento / 2, 'Vitrine', ha='center', va='center', rotation='vertical', color='blue')
    else:
        ax.add_patch(patches.Rectangle((0, -0.1), largura, 0.1, edgecolor='blue', facecolor='none', linewidth=3))
        plt.text(largura / 2, -0.05, 'Vitrine', ha='center', va='center', color='blue')

    plt.show()  # Exibe o gráfico


# Função principal
def main():
    largura = float(input("Insira a largura em metros: "))
    comprimento = float(input("Insira o comprimento em metros: "))

    area = calculate_area(largura, comprimento)
    
    # Lista para armazenar as posições e categorias de cada distribuição
    all_positions = []
    all_categories = []

    # Gerar três distribuições diferentes
    for i in range(3):
        positions = distribute_objects(largura, comprimento)
        category = classify_category(len(positions))
        all_positions.append(positions)
        all_categories.append(category)
    
    # Plotar as três distribuições diferentes
    for i in range(3):
        print(f"\nDistribuição {i+1}:")
        plot_layout(largura, comprimento, all_positions[i], all_categories[i], area)

if __name__ == "__main__":
    main()
